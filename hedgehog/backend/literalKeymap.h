const char * literalKeymap = "xkb_keymap {\n"
"xkb_keycodes \"(unnamed)\" {\n"
"	minimum = 8;\n"
"	maximum = 255;\n"
"	<ESC>                = 9;\n"
"	<AE01>               = 10;\n"
"	<AE02>               = 11;\n"
"	<AE03>               = 12;\n"
"	<AE04>               = 13;\n"
"	<AE05>               = 14;\n"
"	<AE06>               = 15;\n"
"	<AE07>               = 16;\n"
"	<AE08>               = 17;\n"
"	<AE09>               = 18;\n"
"	<AE10>               = 19;\n"
"	<AE11>               = 20;\n"
"	<AE12>               = 21;\n"
"	<BKSP>               = 22;\n"
"	<TAB>                = 23;\n"
"	<AD01>               = 24;\n"
"	<AD02>               = 25;\n"
"	<AD03>               = 26;\n"
"	<AD04>               = 27;\n"
"	<AD05>               = 28;\n"
"	<AD06>               = 29;\n"
"	<AD07>               = 30;\n"
"	<AD08>               = 31;\n"
"	<AD09>               = 32;\n"
"	<AD10>               = 33;\n"
"	<AD11>               = 34;\n"
"	<AD12>               = 35;\n"
"	<RTRN>               = 36;\n"
"	<LCTL>               = 37;\n"
"	<AC01>               = 38;\n"
"	<AC02>               = 39;\n"
"	<AC03>               = 40;\n"
"	<AC04>               = 41;\n"
"	<AC05>               = 42;\n"
"	<AC06>               = 43;\n"
"	<AC07>               = 44;\n"
"	<AC08>               = 45;\n"
"	<AC09>               = 46;\n"
"	<AC10>               = 47;\n"
"	<AC11>               = 48;\n"
"	<TLDE>               = 49;\n"
"	<LFSH>               = 50;\n"
"	<BKSL>               = 51;\n"
"	<AB01>               = 52;\n"
"	<AB02>               = 53;\n"
"	<AB03>               = 54;\n"
"	<AB04>               = 55;\n"
"	<AB05>               = 56;\n"
"	<AB06>               = 57;\n"
"	<AB07>               = 58;\n"
"	<AB08>               = 59;\n"
"	<AB09>               = 60;\n"
"	<AB10>               = 61;\n"
"	<RTSH>               = 62;\n"
"	<KPMU>               = 63;\n"
"	<LALT>               = 64;\n"
"	<SPCE>               = 65;\n"
"	<CAPS>               = 66;\n"
"	<FK01>               = 67;\n"
"	<FK02>               = 68;\n"
"	<FK03>               = 69;\n"
"	<FK04>               = 70;\n"
"	<FK05>               = 71;\n"
"	<FK06>               = 72;\n"
"	<FK07>               = 73;\n"
"	<FK08>               = 74;\n"
"	<FK09>               = 75;\n"
"	<FK10>               = 76;\n"
"	<NMLK>               = 77;\n"
"	<SCLK>               = 78;\n"
"	<KP7>                = 79;\n"
"	<KP8>                = 80;\n"
"	<KP9>                = 81;\n"
"	<KPSU>               = 82;\n"
"	<KP4>                = 83;\n"
"	<KP5>                = 84;\n"
"	<KP6>                = 85;\n"
"	<KPAD>               = 86;\n"
"	<KP1>                = 87;\n"
"	<KP2>                = 88;\n"
"	<KP3>                = 89;\n"
"	<KP0>                = 90;\n"
"	<KPDL>               = 91;\n"
"	<LVL3>               = 92;\n"
"	<LSGT>               = 94;\n"
"	<FK11>               = 95;\n"
"	<FK12>               = 96;\n"
"	<AB11>               = 97;\n"
"	<KATA>               = 98;\n"
"	<HIRA>               = 99;\n"
"	<HENK>               = 100;\n"
"	<HKTG>               = 101;\n"
"	<MUHE>               = 102;\n"
"	<JPCM>               = 103;\n"
"	<KPEN>               = 104;\n"
"	<RCTL>               = 105;\n"
"	<KPDV>               = 106;\n"
"	<PRSC>               = 107;\n"
"	<RALT>               = 108;\n"
"	<LNFD>               = 109;\n"
"	<HOME>               = 110;\n"
"	<UP>                 = 111;\n"
"	<PGUP>               = 112;\n"
"	<LEFT>               = 113;\n"
"	<RGHT>               = 114;\n"
"	<END>                = 115;\n"
"	<DOWN>               = 116;\n"
"	<PGDN>               = 117;\n"
"	<INS>                = 118;\n"
"	<DELE>               = 119;\n"
"	<I120>               = 120;\n"
"	<MUTE>               = 121;\n"
"	<VOL->               = 122;\n"
"	<VOL+>               = 123;\n"
"	<POWR>               = 124;\n"
"	<KPEQ>               = 125;\n"
"	<I126>               = 126;\n"
"	<PAUS>               = 127;\n"
"	<I128>               = 128;\n"
"	<I129>               = 129;\n"
"	<HNGL>               = 130;\n"
"	<HJCV>               = 131;\n"
"	<AE13>               = 132;\n"
"	<LWIN>               = 133;\n"
"	<RWIN>               = 134;\n"
"	<COMP>               = 135;\n"
"	<STOP>               = 136;\n"
"	<AGAI>               = 137;\n"
"	<PROP>               = 138;\n"
"	<UNDO>               = 139;\n"
"	<FRNT>               = 140;\n"
"	<COPY>               = 141;\n"
"	<OPEN>               = 142;\n"
"	<PAST>               = 143;\n"
"	<FIND>               = 144;\n"
"	<CUT>                = 145;\n"
"	<HELP>               = 146;\n"
"	<I147>               = 147;\n"
"	<I148>               = 148;\n"
"	<I149>               = 149;\n"
"	<I150>               = 150;\n"
"	<I151>               = 151;\n"
"	<I152>               = 152;\n"
"	<I153>               = 153;\n"
"	<I154>               = 154;\n"
"	<I155>               = 155;\n"
"	<I156>               = 156;\n"
"	<I157>               = 157;\n"
"	<I158>               = 158;\n"
"	<I159>               = 159;\n"
"	<I160>               = 160;\n"
"	<I161>               = 161;\n"
"	<I162>               = 162;\n"
"	<I163>               = 163;\n"
"	<I164>               = 164;\n"
"	<I165>               = 165;\n"
"	<I166>               = 166;\n"
"	<I167>               = 167;\n"
"	<I168>               = 168;\n"
"	<I169>               = 169;\n"
"	<I170>               = 170;\n"
"	<I171>               = 171;\n"
"	<I172>               = 172;\n"
"	<I173>               = 173;\n"
"	<I174>               = 174;\n"
"	<I175>               = 175;\n"
"	<I176>               = 176;\n"
"	<I177>               = 177;\n"
"	<I178>               = 178;\n"
"	<I179>               = 179;\n"
"	<I180>               = 180;\n"
"	<I181>               = 181;\n"
"	<I182>               = 182;\n"
"	<I183>               = 183;\n"
"	<I184>               = 184;\n"
"	<I185>               = 185;\n"
"	<I186>               = 186;\n"
"	<I187>               = 187;\n"
"	<I188>               = 188;\n"
"	<I189>               = 189;\n"
"	<I190>               = 190;\n"
"	<FK13>               = 191;\n"
"	<FK14>               = 192;\n"
"	<FK15>               = 193;\n"
"	<FK16>               = 194;\n"
"	<FK17>               = 195;\n"
"	<FK18>               = 196;\n"
"	<FK19>               = 197;\n"
"	<FK20>               = 198;\n"
"	<FK21>               = 199;\n"
"	<FK22>               = 200;\n"
"	<FK23>               = 201;\n"
"	<FK24>               = 202;\n"
"	<MDSW>               = 203;\n"
"	<ALT>                = 204;\n"
"	<META>               = 205;\n"
"	<SUPR>               = 206;\n"
"	<HYPR>               = 207;\n"
"	<I208>               = 208;\n"
"	<I209>               = 209;\n"
"	<I210>               = 210;\n"
"	<I211>               = 211;\n"
"	<I212>               = 212;\n"
"	<I213>               = 213;\n"
"	<I214>               = 214;\n"
"	<I215>               = 215;\n"
"	<I216>               = 216;\n"
"	<I217>               = 217;\n"
"	<I218>               = 218;\n"
"	<I219>               = 219;\n"
"	<I220>               = 220;\n"
"	<I221>               = 221;\n"
"	<I222>               = 222;\n"
"	<I223>               = 223;\n"
"	<I224>               = 224;\n"
"	<I225>               = 225;\n"
"	<I226>               = 226;\n"
"	<I227>               = 227;\n"
"	<I228>               = 228;\n"
"	<I229>               = 229;\n"
"	<I230>               = 230;\n"
"	<I231>               = 231;\n"
"	<I232>               = 232;\n"
"	<I233>               = 233;\n"
"	<I234>               = 234;\n"
"	<I235>               = 235;\n"
"	<I236>               = 236;\n"
"	<I237>               = 237;\n"
"	<I238>               = 238;\n"
"	<I239>               = 239;\n"
"	<I240>               = 240;\n"
"	<I241>               = 241;\n"
"	<I242>               = 242;\n"
"	<I243>               = 243;\n"
"	<I244>               = 244;\n"
"	<I245>               = 245;\n"
"	<I246>               = 246;\n"
"	<I247>               = 247;\n"
"	<I248>               = 248;\n"
"	<I249>               = 249;\n"
"	<I250>               = 250;\n"
"	<I251>               = 251;\n"
"	<I252>               = 252;\n"
"	<I253>               = 253;\n"
"	<I254>               = 254;\n"
"	<I255>               = 255;\n"
"	indicator 1 = \"Caps Lock\";\n"
"	indicator 2 = \"Num Lock\";\n"
"	indicator 3 = \"Scroll Lock\";\n"
"	indicator 4 = \"Compose\";\n"
"	indicator 5 = \"Kana\";\n"
"	indicator 6 = \"Sleep\";\n"
"	indicator 7 = \"Suspend\";\n"
"	indicator 8 = \"Mute\";\n"
"	indicator 9 = \"Misc\";\n"
"	indicator 10 = \"Mail\";\n"
"	indicator 11 = \"Charging\";\n"
"	indicator 12 = \"Shift Lock\";\n"
"	indicator 13 = \"Group 2\";\n"
"	indicator 14 = \"Mouse Keys\";\n"
"	alias <AC12>         = <BKSL>;\n"
"	alias <MENU>         = <COMP>;\n"
"	alias <HZTG>         = <TLDE>;\n"
"	alias <LMTA>         = <LWIN>;\n"
"	alias <RMTA>         = <RWIN>;\n"
"	alias <ALGR>         = <RALT>;\n"
"	alias <KPPT>         = <I129>;\n"
"	alias <LatQ>         = <AD01>;\n"
"	alias <LatW>         = <AD02>;\n"
"	alias <LatE>         = <AD03>;\n"
"	alias <LatR>         = <AD04>;\n"
"	alias <LatT>         = <AD05>;\n"
"	alias <LatY>         = <AD06>;\n"
"	alias <LatU>         = <AD07>;\n"
"	alias <LatI>         = <AD08>;\n"
"	alias <LatO>         = <AD09>;\n"
"	alias <LatP>         = <AD10>;\n"
"	alias <LatA>         = <AC01>;\n"
"	alias <LatS>         = <AC02>;\n"
"	alias <LatD>         = <AC03>;\n"
"	alias <LatF>         = <AC04>;\n"
"	alias <LatG>         = <AC05>;\n"
"	alias <LatH>         = <AC06>;\n"
"	alias <LatJ>         = <AC07>;\n"
"	alias <LatK>         = <AC08>;\n"
"	alias <LatL>         = <AC09>;\n"
"	alias <LatZ>         = <AB01>;\n"
"	alias <LatX>         = <AB02>;\n"
"	alias <LatC>         = <AB03>;\n"
"	alias <LatV>         = <AB04>;\n"
"	alias <LatB>         = <AB05>;\n"
"	alias <LatN>         = <AB06>;\n"
"	alias <LatM>         = <AB07>;\n"
"};\n"
"\n"
"xkb_types \"(unnamed)\" {\n"
"	virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;\n"
"\n"
"	type \"ONE_LEVEL\" {\n"
"		modifiers= none;\n"
"		level_name[Level1]= \"Any\";\n"
"	};\n"
"	type \"TWO_LEVEL\" {\n"
"		modifiers= Shift;\n"
"		map[Shift]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"	};\n"
"	type \"ALPHABETIC\" {\n"
"		modifiers= Shift+Lock;\n"
"		map[Shift]= Level2;\n"
"		map[Lock]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Caps\";\n"
"	};\n"
"	type \"SHIFT+ALT\" {\n"
"		modifiers= Shift+Alt;\n"
"		map[Shift+Alt]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift+Alt\";\n"
"	};\n"
"	type \"PC_SUPER_LEVEL2\" {\n"
"		modifiers= Mod4;\n"
"		map[Mod4]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Super\";\n"
"	};\n"
"	type \"PC_CONTROL_LEVEL2\" {\n"
"		modifiers= Control;\n"
"		map[Control]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Control\";\n"
"	};\n"
"	type \"PC_LCONTROL_LEVEL2\" {\n"
"		modifiers= LControl;\n"
"		map[LControl]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"LControl\";\n"
"	};\n"
"	type \"PC_RCONTROL_LEVEL2\" {\n"
"		modifiers= RControl;\n"
"		map[RControl]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"RControl\";\n"
"	};\n"
"	type \"PC_ALT_LEVEL2\" {\n"
"		modifiers= Alt;\n"
"		map[Alt]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Alt\";\n"
"	};\n"
"	type \"PC_LALT_LEVEL2\" {\n"
"		modifiers= LAlt;\n"
"		map[LAlt]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"LAlt\";\n"
"	};\n"
"	type \"PC_RALT_LEVEL2\" {\n"
"		modifiers= RAlt;\n"
"		map[RAlt]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"RAlt\";\n"
"	};\n"
"	type \"CTRL+ALT\" {\n"
"		modifiers= Shift+Control+Alt+LevelThree;\n"
"		map[Shift]= Level2;\n"
"		preserve[Shift]= Shift;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		preserve[Shift+LevelThree]= Shift;\n"
"		map[Control+Alt]= Level5;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"		level_name[Level5]= \"Ctrl+Alt\";\n"
"	};\n"
"	type \"LOCAL_EIGHT_LEVEL\" {\n"
"		modifiers= Shift+Lock+Control+LevelThree;\n"
"		map[Shift]= Level2;\n"
"		map[Lock]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+Lock+LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[Lock+LevelThree]= Level4;\n"
"		map[Control]= Level5;\n"
"		map[Shift+Lock+Control]= Level5;\n"
"		map[Shift+Control]= Level6;\n"
"		map[Lock+Control]= Level6;\n"
"		map[Control+LevelThree]= Level7;\n"
"		map[Shift+Lock+Control+LevelThree]= Level7;\n"
"		map[Shift+Control+LevelThree]= Level8;\n"
"		map[Lock+Control+LevelThree]= Level8;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Level3\";\n"
"		level_name[Level4]= \"Shift Level3\";\n"
"		level_name[Level5]= \"Ctrl\";\n"
"		level_name[Level6]= \"Shift Ctrl\";\n"
"		level_name[Level7]= \"Level3 Ctrl\";\n"
"		level_name[Level8]= \"Shift Level3 Ctrl\";\n"
"	};\n"
"	type \"THREE_LEVEL\" {\n"
"		modifiers= Shift+LevelThree;\n"
"		map[Shift]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level3;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Level3\";\n"
"	};\n"
"	type \"EIGHT_LEVEL\" {\n"
"		modifiers= Shift+LevelThree+LevelFive;\n"
"		map[Shift]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[LevelFive]= Level5;\n"
"		map[Shift+LevelFive]= Level6;\n"
"		map[LevelThree+LevelFive]= Level7;\n"
"		map[Shift+LevelThree+LevelFive]= Level8;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"		level_name[Level5]= \"X\";\n"
"		level_name[Level6]= \"X Shift\";\n"
"		level_name[Level7]= \"X Alt Base\";\n"
"		level_name[Level8]= \"X Shift Alt\";\n"
"	};\n"
"	type \"EIGHT_LEVEL_ALPHABETIC\" {\n"
"		modifiers= Shift+Lock+LevelThree+LevelFive;\n"
"		map[Shift]= Level2;\n"
"		map[Lock]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[Lock+LevelThree]= Level4;\n"
"		map[Shift+Lock+LevelThree]= Level3;\n"
"		map[LevelFive]= Level5;\n"
"		map[Shift+LevelFive]= Level6;\n"
"		map[Lock+LevelFive]= Level6;\n"
"		map[LevelThree+LevelFive]= Level7;\n"
"		map[Shift+LevelThree+LevelFive]= Level8;\n"
"		map[Lock+LevelThree+LevelFive]= Level8;\n"
"		map[Shift+Lock+LevelThree+LevelFive]= Level7;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"		level_name[Level5]= \"X\";\n"
"		level_name[Level6]= \"X Shift\";\n"
"		level_name[Level7]= \"X Alt Base\";\n"
"		level_name[Level8]= \"X Shift Alt\";\n"
"	};\n"
"	type \"EIGHT_LEVEL_LEVEL_FIVE_LOCK\" {\n"
"		modifiers= Shift+Lock+NumLock+LevelThree+LevelFive;\n"
"		map[Shift]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[LevelFive]= Level5;\n"
"		map[Shift+LevelFive]= Level6;\n"
"		preserve[Shift+LevelFive]= Shift;\n"
"		map[LevelThree+LevelFive]= Level7;\n"
"		map[Shift+LevelThree+LevelFive]= Level8;\n"
"		map[NumLock]= Level5;\n"
"		map[Shift+NumLock]= Level6;\n"
"		preserve[Shift+NumLock]= Shift;\n"
"		map[NumLock+LevelThree]= Level7;\n"
"		map[Shift+NumLock+LevelThree]= Level8;\n"
"		map[Shift+NumLock+LevelFive]= Level2;\n"
"		map[NumLock+LevelThree+LevelFive]= Level3;\n"
"		map[Shift+NumLock+LevelThree+LevelFive]= Level4;\n"
"		map[Shift+Lock]= Level2;\n"
"		map[Lock+LevelThree]= Level3;\n"
"		map[Shift+Lock+LevelThree]= Level4;\n"
"		map[Lock+LevelFive]= Level5;\n"
"		map[Shift+Lock+LevelFive]= Level6;\n"
"		preserve[Shift+Lock+LevelFive]= Shift;\n"
"		map[Lock+LevelThree+LevelFive]= Level7;\n"
"		map[Shift+Lock+LevelThree+LevelFive]= Level8;\n"
"		map[Lock+NumLock]= Level5;\n"
"		map[Shift+Lock+NumLock]= Level6;\n"
"		preserve[Shift+Lock+NumLock]= Shift;\n"
"		map[Lock+NumLock+LevelThree]= Level7;\n"
"		map[Shift+Lock+NumLock+LevelThree]= Level8;\n"
"		map[Shift+Lock+NumLock+LevelFive]= Level2;\n"
"		map[Lock+NumLock+LevelThree+LevelFive]= Level3;\n"
"		map[Shift+Lock+NumLock+LevelThree+LevelFive]= Level4;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"		level_name[Level5]= \"X\";\n"
"		level_name[Level6]= \"X Shift\";\n"
"		level_name[Level7]= \"X Alt Base\";\n"
"		level_name[Level8]= \"X Shift Alt\";\n"
"	};\n"
"	type \"EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK\" {\n"
"		modifiers= Shift+Lock+NumLock+LevelThree+LevelFive;\n"
"		map[Shift]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[LevelFive]= Level5;\n"
"		map[Shift+LevelFive]= Level6;\n"
"		preserve[Shift+LevelFive]= Shift;\n"
"		map[LevelThree+LevelFive]= Level7;\n"
"		map[Shift+LevelThree+LevelFive]= Level8;\n"
"		map[NumLock]= Level5;\n"
"		map[Shift+NumLock]= Level6;\n"
"		preserve[Shift+NumLock]= Shift;\n"
"		map[NumLock+LevelThree]= Level7;\n"
"		map[Shift+NumLock+LevelThree]= Level8;\n"
"		map[Shift+NumLock+LevelFive]= Level2;\n"
"		map[NumLock+LevelThree+LevelFive]= Level3;\n"
"		map[Shift+NumLock+LevelThree+LevelFive]= Level4;\n"
"		map[Lock]= Level2;\n"
"		map[Lock+LevelThree]= Level3;\n"
"		map[Shift+Lock+LevelThree]= Level4;\n"
"		map[Lock+LevelFive]= Level5;\n"
"		map[Shift+Lock+LevelFive]= Level6;\n"
"		map[Lock+LevelThree+LevelFive]= Level7;\n"
"		map[Shift+Lock+LevelThree+LevelFive]= Level8;\n"
"		map[Lock+NumLock]= Level5;\n"
"		map[Shift+Lock+NumLock]= Level6;\n"
"		map[Lock+NumLock+LevelThree]= Level7;\n"
"		map[Shift+Lock+NumLock+LevelThree]= Level8;\n"
"		map[Lock+NumLock+LevelFive]= Level2;\n"
"		map[Lock+NumLock+LevelThree+LevelFive]= Level4;\n"
"		map[Shift+Lock+NumLock+LevelThree+LevelFive]= Level3;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"		level_name[Level5]= \"X\";\n"
"		level_name[Level6]= \"X Shift\";\n"
"		level_name[Level7]= \"X Alt Base\";\n"
"		level_name[Level8]= \"X Shift Alt\";\n"
"	};\n"
"	type \"EIGHT_LEVEL_SEMIALPHABETIC\" {\n"
"		modifiers= Shift+Lock+LevelThree+LevelFive;\n"
"		map[Shift]= Level2;\n"
"		map[Lock]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[Lock+LevelThree]= Level3;\n"
"		preserve[Lock+LevelThree]= Lock;\n"
"		map[Shift+Lock+LevelThree]= Level4;\n"
"		preserve[Shift+Lock+LevelThree]= Lock;\n"
"		map[LevelFive]= Level5;\n"
"		map[Shift+LevelFive]= Level6;\n"
"		map[Lock+LevelFive]= Level6;\n"
"		preserve[Lock+LevelFive]= Lock;\n"
"		map[Shift+Lock+LevelFive]= Level6;\n"
"		preserve[Shift+Lock+LevelFive]= Lock;\n"
"		map[LevelThree+LevelFive]= Level7;\n"
"		map[Shift+LevelThree+LevelFive]= Level8;\n"
"		map[Lock+LevelThree+LevelFive]= Level7;\n"
"		preserve[Lock+LevelThree+LevelFive]= Lock;\n"
"		map[Shift+Lock+LevelThree+LevelFive]= Level8;\n"
"		preserve[Shift+Lock+LevelThree+LevelFive]= Lock;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"		level_name[Level5]= \"X\";\n"
"		level_name[Level6]= \"X Shift\";\n"
"		level_name[Level7]= \"X Alt Base\";\n"
"		level_name[Level8]= \"X Shift Alt\";\n"
"	};\n"
"	type \"FOUR_LEVEL\" {\n"
"		modifiers= Shift+LevelThree;\n"
"		map[Shift]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"	};\n"
"	type \"FOUR_LEVEL_ALPHABETIC\" {\n"
"		modifiers= Shift+Lock+LevelThree;\n"
"		map[Shift]= Level2;\n"
"		map[Lock]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[Lock+LevelThree]= Level4;\n"
"		map[Shift+Lock+LevelThree]= Level3;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"	};\n"
"	type \"FOUR_LEVEL_SEMIALPHABETIC\" {\n"
"		modifiers= Shift+Lock+LevelThree;\n"
"		map[Shift]= Level2;\n"
"		map[Lock]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[Lock+LevelThree]= Level3;\n"
"		preserve[Lock+LevelThree]= Lock;\n"
"		map[Shift+Lock+LevelThree]= Level4;\n"
"		preserve[Shift+Lock+LevelThree]= Lock;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"	};\n"
"	type \"FOUR_LEVEL_MIXED_KEYPAD\" {\n"
"		modifiers= Shift+NumLock+LevelThree;\n"
"		map[NumLock]= Level2;\n"
"		map[Shift]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[NumLock+LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[Shift+NumLock+LevelThree]= Level4;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Number\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"	};\n"
"	type \"FOUR_LEVEL_X\" {\n"
"		modifiers= Shift+Control+Alt+LevelThree;\n"
"		map[LevelThree]= Level2;\n"
"		map[Shift+LevelThree]= Level3;\n"
"		map[Control+Alt]= Level4;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Alt Base\";\n"
"		level_name[Level3]= \"Shift Alt\";\n"
"		level_name[Level4]= \"Ctrl+Alt\";\n"
"	};\n"
"	type \"SEPARATE_CAPS_AND_SHIFT_ALPHABETIC\" {\n"
"		modifiers= Shift+Lock+LevelThree;\n"
"		map[Shift]= Level2;\n"
"		map[Lock]= Level4;\n"
"		preserve[Lock]= Lock;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[Lock+LevelThree]= Level3;\n"
"		preserve[Lock+LevelThree]= Lock;\n"
"		map[Shift+Lock+LevelThree]= Level3;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"AltGr Base\";\n"
"		level_name[Level4]= \"Shift AltGr\";\n"
"	};\n"
"	type \"FOUR_LEVEL_PLUS_LOCK\" {\n"
"		modifiers= Shift+Lock+LevelThree;\n"
"		map[Shift]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[Lock]= Level5;\n"
"		map[Shift+Lock]= Level2;\n"
"		map[Lock+LevelThree]= Level3;\n"
"		map[Shift+Lock+LevelThree]= Level4;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Shift\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Shift Alt\";\n"
"		level_name[Level5]= \"Lock\";\n"
"	};\n"
"	type \"KEYPAD\" {\n"
"		modifiers= Shift+NumLock;\n"
"		map[Shift]= Level2;\n"
"		map[NumLock]= Level2;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Number\";\n"
"	};\n"
"	type \"FOUR_LEVEL_KEYPAD\" {\n"
"		modifiers= Shift+NumLock+LevelThree;\n"
"		map[Shift]= Level2;\n"
"		map[NumLock]= Level2;\n"
"		map[LevelThree]= Level3;\n"
"		map[Shift+LevelThree]= Level4;\n"
"		map[NumLock+LevelThree]= Level4;\n"
"		map[Shift+NumLock+LevelThree]= Level3;\n"
"		level_name[Level1]= \"Base\";\n"
"		level_name[Level2]= \"Number\";\n"
"		level_name[Level3]= \"Alt Base\";\n"
"		level_name[Level4]= \"Alt Number\";\n"
"	};\n"
"};\n"
"\n"
"xkb_compatibility \"(unnamed)\" {\n"
"	virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;\n"
"\n"
"	interpret.useModMapMods= AnyLevel;\n"
"	interpret.repeat= False;\n"
"	interpret ISO_Level2_Latch+Exactly(Shift) {\n"
"		useModMapMods=level1;\n"
"		action= LatchMods(modifiers=Shift,clearLocks,latchToLock);\n"
"	};\n"
"	interpret Shift_Lock+AnyOf(Shift+Lock) {\n"
"		action= LockMods(modifiers=Shift);\n"
"	};\n"
"	interpret Num_Lock+AnyOf(all) {\n"
"		virtualModifier= NumLock;\n"
"		action= LockMods(modifiers=NumLock);\n"
"	};\n"
"	interpret ISO_Level3_Shift+AnyOf(all) {\n"
"		virtualModifier= LevelThree;\n"
"		useModMapMods=level1;\n"
"		action= SetMods(modifiers=LevelThree,clearLocks);\n"
"	};\n"
"	interpret ISO_Level3_Latch+AnyOf(all) {\n"
"		virtualModifier= LevelThree;\n"
"		useModMapMods=level1;\n"
"		action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);\n"
"	};\n"
"	interpret ISO_Level3_Lock+AnyOf(all) {\n"
"		virtualModifier= LevelThree;\n"
"		useModMapMods=level1;\n"
"		action= LockMods(modifiers=LevelThree);\n"
"	};\n"
"	interpret Alt_L+AnyOf(all) {\n"
"		virtualModifier= Alt;\n"
"		action= SetMods(modifiers=modMapMods,clearLocks);\n"
"	};\n"
"	interpret Alt_R+AnyOf(all) {\n"
"		virtualModifier= Alt;\n"
"		action= SetMods(modifiers=modMapMods,clearLocks);\n"
"	};\n"
"	interpret Meta_L+AnyOf(all) {\n"
"		virtualModifier= Meta;\n"
"		action= SetMods(modifiers=modMapMods,clearLocks);\n"
"	};\n"
"	interpret Meta_R+AnyOf(all) {\n"
"		virtualModifier= Meta;\n"
"		action= SetMods(modifiers=modMapMods,clearLocks);\n"
"	};\n"
"	interpret Super_L+AnyOf(all) {\n"
"		virtualModifier= Super;\n"
"		action= SetMods(modifiers=modMapMods,clearLocks);\n"
"	};\n"
"	interpret Super_R+AnyOf(all) {\n"
"		virtualModifier= Super;\n"
"		action= SetMods(modifiers=modMapMods,clearLocks);\n"
"	};\n"
"	interpret Hyper_L+AnyOf(all) {\n"
"		virtualModifier= Hyper;\n"
"		action= SetMods(modifiers=modMapMods,clearLocks);\n"
"	};\n"
"	interpret Hyper_R+AnyOf(all) {\n"
"		virtualModifier= Hyper;\n"
"		action= SetMods(modifiers=modMapMods,clearLocks);\n"
"	};\n"
"	interpret Scroll_Lock+AnyOf(all) {\n"
"		virtualModifier= ScrollLock;\n"
"		action= LockMods(modifiers=modMapMods);\n"
"	};\n"
"	interpret ISO_Level5_Shift+AnyOf(all) {\n"
"		virtualModifier= LevelFive;\n"
"		useModMapMods=level1;\n"
"		action= SetMods(modifiers=LevelFive,clearLocks);\n"
"	};\n"
"	interpret ISO_Level5_Latch+AnyOf(all) {\n"
"		virtualModifier= LevelFive;\n"
"		useModMapMods=level1;\n"
"		action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);\n"
"	};\n"
"	interpret ISO_Level5_Lock+AnyOf(all) {\n"
"		virtualModifier= LevelFive;\n"
"		useModMapMods=level1;\n"
"		action= LockMods(modifiers=LevelFive);\n"
"	};\n"
"	interpret Mode_switch+AnyOfOrNone(all) {\n"
"		virtualModifier= AltGr;\n"
"		useModMapMods=level1;\n"
"		action= SetGroup(group=+1);\n"
"	};\n"
"	interpret ISO_Level3_Shift+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=LevelThree,clearLocks);\n"
"	};\n"
"	interpret ISO_Level3_Latch+AnyOfOrNone(all) {\n"
"		action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);\n"
"	};\n"
"	interpret ISO_Level3_Lock+AnyOfOrNone(all) {\n"
"		action= LockMods(modifiers=LevelThree);\n"
"	};\n"
"	interpret ISO_Group_Latch+AnyOfOrNone(all) {\n"
"		virtualModifier= AltGr;\n"
"		useModMapMods=level1;\n"
"		action= LatchGroup(group=2);\n"
"	};\n"
"	interpret ISO_Next_Group+AnyOfOrNone(all) {\n"
"		virtualModifier= AltGr;\n"
"		useModMapMods=level1;\n"
"		action= LockGroup(group=+1);\n"
"	};\n"
"	interpret ISO_Prev_Group+AnyOfOrNone(all) {\n"
"		virtualModifier= AltGr;\n"
"		useModMapMods=level1;\n"
"		action= LockGroup(group=-1);\n"
"	};\n"
"	interpret ISO_First_Group+AnyOfOrNone(all) {\n"
"		action= LockGroup(group=1);\n"
"	};\n"
"	interpret ISO_Last_Group+AnyOfOrNone(all) {\n"
"		action= LockGroup(group=2);\n"
"	};\n"
"	interpret KP_1+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=-1,y=+1);\n"
"	};\n"
"	interpret KP_End+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=-1,y=+1);\n"
"	};\n"
"	interpret KP_2+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+0,y=+1);\n"
"	};\n"
"	interpret KP_Down+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+0,y=+1);\n"
"	};\n"
"	interpret KP_3+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+1,y=+1);\n"
"	};\n"
"	interpret KP_Next+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+1,y=+1);\n"
"	};\n"
"	interpret KP_4+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=-1,y=+0);\n"
"	};\n"
"	interpret KP_Left+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=-1,y=+0);\n"
"	};\n"
"	interpret KP_6+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+1,y=+0);\n"
"	};\n"
"	interpret KP_Right+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+1,y=+0);\n"
"	};\n"
"	interpret KP_7+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=-1,y=-1);\n"
"	};\n"
"	interpret KP_Home+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=-1,y=-1);\n"
"	};\n"
"	interpret KP_8+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+0,y=-1);\n"
"	};\n"
"	interpret KP_Up+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+0,y=-1);\n"
"	};\n"
"	interpret KP_9+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+1,y=-1);\n"
"	};\n"
"	interpret KP_Prior+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+1,y=-1);\n"
"	};\n"
"	interpret KP_5+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= PtrBtn(button=default);\n"
"	};\n"
"	interpret KP_Begin+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= PtrBtn(button=default);\n"
"	};\n"
"	interpret KP_F2+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SetPtrDflt(affect=button,button=1);\n"
"	};\n"
"	interpret KP_Divide+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SetPtrDflt(affect=button,button=1);\n"
"	};\n"
"	interpret KP_F3+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SetPtrDflt(affect=button,button=2);\n"
"	};\n"
"	interpret KP_Multiply+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SetPtrDflt(affect=button,button=2);\n"
"	};\n"
"	interpret KP_F4+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SetPtrDflt(affect=button,button=3);\n"
"	};\n"
"	interpret KP_Subtract+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SetPtrDflt(affect=button,button=3);\n"
"	};\n"
"	interpret KP_Separator+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= PtrBtn(button=default,count=2);\n"
"	};\n"
"	interpret KP_Add+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= PtrBtn(button=default,count=2);\n"
"	};\n"
"	interpret KP_0+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= LockPtrBtn(button=default,affect=lock);\n"
"	};\n"
"	interpret KP_Insert+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= LockPtrBtn(button=default,affect=lock);\n"
"	};\n"
"	interpret KP_Decimal+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= LockPtrBtn(button=default,affect=unlock);\n"
"	};\n"
"	interpret KP_Delete+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= LockPtrBtn(button=default,affect=unlock);\n"
"	};\n"
"	interpret F25+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SetPtrDflt(affect=button,button=1);\n"
"	};\n"
"	interpret F26+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SetPtrDflt(affect=button,button=2);\n"
"	};\n"
"	interpret F27+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=-1,y=-1);\n"
"	};\n"
"	interpret F29+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+1,y=-1);\n"
"	};\n"
"	interpret F31+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= PtrBtn(button=default);\n"
"	};\n"
"	interpret F33+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=-1,y=+1);\n"
"	};\n"
"	interpret F35+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= MovePtr(x=+1,y=+1);\n"
"	};\n"
"	interpret Pointer_Button_Dflt+AnyOfOrNone(all) {\n"
"		action= PtrBtn(button=default);\n"
"	};\n"
"	interpret Pointer_Button1+AnyOfOrNone(all) {\n"
"		action= PtrBtn(button=1);\n"
"	};\n"
"	interpret Pointer_Button2+AnyOfOrNone(all) {\n"
"		action= PtrBtn(button=2);\n"
"	};\n"
"	interpret Pointer_Button3+AnyOfOrNone(all) {\n"
"		action= PtrBtn(button=3);\n"
"	};\n"
"	interpret Pointer_DblClick_Dflt+AnyOfOrNone(all) {\n"
"		action= PtrBtn(button=default,count=2);\n"
"	};\n"
"	interpret Pointer_DblClick1+AnyOfOrNone(all) {\n"
"		action= PtrBtn(button=1,count=2);\n"
"	};\n"
"	interpret Pointer_DblClick2+AnyOfOrNone(all) {\n"
"		action= PtrBtn(button=2,count=2);\n"
"	};\n"
"	interpret Pointer_DblClick3+AnyOfOrNone(all) {\n"
"		action= PtrBtn(button=3,count=2);\n"
"	};\n"
"	interpret Pointer_Drag_Dflt+AnyOfOrNone(all) {\n"
"		action= LockPtrBtn(button=default);\n"
"	};\n"
"	interpret Pointer_Drag1+AnyOfOrNone(all) {\n"
"		action= LockPtrBtn(button=1);\n"
"	};\n"
"	interpret Pointer_Drag2+AnyOfOrNone(all) {\n"
"		action= LockPtrBtn(button=2);\n"
"	};\n"
"	interpret Pointer_Drag3+AnyOfOrNone(all) {\n"
"		action= LockPtrBtn(button=3);\n"
"	};\n"
"	interpret Pointer_EnableKeys+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=MouseKeys);\n"
"	};\n"
"	interpret Pointer_Accelerate+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=MouseKeysAccel);\n"
"	};\n"
"	interpret Pointer_DfltBtnNext+AnyOfOrNone(all) {\n"
"		action= SetPtrDflt(affect=button,button=+1);\n"
"	};\n"
"	interpret Pointer_DfltBtnPrev+AnyOfOrNone(all) {\n"
"		action= SetPtrDflt(affect=button,button=-1);\n"
"	};\n"
"	interpret AccessX_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=AccessXKeys);\n"
"	};\n"
"	interpret AccessX_Feedback_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=AccessXFeedback);\n"
"	};\n"
"	interpret RepeatKeys_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=RepeatKeys);\n"
"	};\n"
"	interpret SlowKeys_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=SlowKeys);\n"
"	};\n"
"	interpret BounceKeys_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=BounceKeys);\n"
"	};\n"
"	interpret StickyKeys_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=StickyKeys);\n"
"	};\n"
"	interpret MouseKeys_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=MouseKeys);\n"
"	};\n"
"	interpret MouseKeys_Accel_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=MouseKeysAccel);\n"
"	};\n"
"	interpret Overlay1_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=none);\n"
"	};\n"
"	interpret Overlay2_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=none);\n"
"	};\n"
"	interpret AudibleBell_Enable+AnyOfOrNone(all) {\n"
"		action= LockControls(controls=AudibleBell);\n"
"	};\n"
"	interpret Terminate_Server+AnyOfOrNone(all) {\n"
"		action= Terminate();\n"
"	};\n"
"	interpret Alt_L+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=Alt,clearLocks);\n"
"	};\n"
"	interpret Alt_R+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=Alt,clearLocks);\n"
"	};\n"
"	interpret Meta_L+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=Meta,clearLocks);\n"
"	};\n"
"	interpret Meta_R+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=Meta,clearLocks);\n"
"	};\n"
"	interpret Super_L+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=Super,clearLocks);\n"
"	};\n"
"	interpret Super_R+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=Super,clearLocks);\n"
"	};\n"
"	interpret Hyper_L+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=Hyper,clearLocks);\n"
"	};\n"
"	interpret Hyper_R+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=Hyper,clearLocks);\n"
"	};\n"
"	interpret Shift_L+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=Shift,clearLocks);\n"
"	};\n"
"	interpret XF86Switch_VT_1+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=1,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_2+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=2,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_3+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=3,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_4+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=4,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_5+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=5,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_6+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=6,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_7+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=7,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_8+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=8,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_9+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=9,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_10+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=10,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_11+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=11,!same);\n"
"	};\n"
"	interpret XF86Switch_VT_12+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= SwitchScreen(screen=12,!same);\n"
"	};\n"
"	interpret XF86LogGrabInfo+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x47,data[3]=0x72,data[4]=0x62,data[5]=0x73,data[6]=0x00);\n"
"	};\n"
"	interpret XF86LogWindowTree+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x57,data[3]=0x69,data[4]=0x6e,data[5]=0x73,data[6]=0x00);\n"
"	};\n"
"	interpret XF86Next_VMode+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= Private(type=0x86,data[0]=0x2b,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);\n"
"	};\n"
"	interpret XF86Prev_VMode+AnyOfOrNone(all) {\n"
"		repeat= True;\n"
"		action= Private(type=0x86,data[0]=0x2d,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);\n"
"	};\n"
"	interpret ISO_Level5_Shift+AnyOfOrNone(all) {\n"
"		action= SetMods(modifiers=LevelFive,clearLocks);\n"
"	};\n"
"	interpret ISO_Level5_Latch+AnyOfOrNone(all) {\n"
"		action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);\n"
"	};\n"
"	interpret ISO_Level5_Lock+AnyOfOrNone(all) {\n"
"		action= LockMods(modifiers=LevelFive);\n"
"	};\n"
"	interpret Caps_Lock+AnyOfOrNone(all) {\n"
"		action= LockMods(modifiers=Lock);\n"
"	};\n"
"	interpret Any+Exactly(Lock) {\n"
"		action= LockMods(modifiers=Lock);\n"
"	};\n"
"	interpret Any+AnyOf(all) {\n"
"		action= SetMods(modifiers=modMapMods,clearLocks);\n"
"	};\n"
"	indicator \"Caps Lock\" {\n"
"		whichModState= locked;\n"
"		modifiers= Lock;\n"
"	};\n"
"	indicator \"Num Lock\" {\n"
"		whichModState= locked;\n"
"		modifiers= NumLock;\n"
"	};\n"
"	indicator \"Scroll Lock\" {\n"
"		whichModState= locked;\n"
"		modifiers= ScrollLock;\n"
"	};\n"
"	indicator \"Shift Lock\" {\n"
"		whichModState= locked;\n"
"		modifiers= Shift;\n"
"	};\n"
"	indicator \"Group 2\" {\n"
"		groups= 0xfe;\n"
"	};\n"
"	indicator \"Mouse Keys\" {\n"
"		controls= MouseKeys;\n"
"	};\n"
"};\n"
"\n"
"xkb_symbols \"(unnamed)\" {\n"
"	name[group1]=\"English (US)\";\n"
"\n"
"	key <ESC>                {	[          Escape ] };\n"
"	key <AE01>               {	[               1,          exclam ] };\n"
"	key <AE02>               {	[               2,              at ] };\n"
"	key <AE03>               {	[               3,      numbersign ] };\n"
"	key <AE04>               {	[               4,          dollar ] };\n"
"	key <AE05>               {	[               5,         percent ] };\n"
"	key <AE06>               {	[               6,     asciicircum ] };\n"
"	key <AE07>               {	[               7,       ampersand ] };\n"
"	key <AE08>               {	[               8,        asterisk ] };\n"
"	key <AE09>               {	[               9,       parenleft ] };\n"
"	key <AE10>               {	[               0,      parenright ] };\n"
"	key <AE11>               {	[           minus,      underscore ] };\n"
"	key <AE12>               {	[           equal,            plus ] };\n"
"	key <BKSP>               {	[       BackSpace,       BackSpace ] };\n"
"	key <TAB>                {	[             Tab,    ISO_Left_Tab ] };\n"
"	key <AD01>               {	[               q,               Q ] };\n"
"	key <AD02>               {	[               w,               W ] };\n"
"	key <AD03>               {	[               e,               E ] };\n"
"	key <AD04>               {	[               r,               R ] };\n"
"	key <AD05>               {	[               t,               T ] };\n"
"	key <AD06>               {	[               y,               Y ] };\n"
"	key <AD07>               {	[               u,               U ] };\n"
"	key <AD08>               {	[               i,               I ] };\n"
"	key <AD09>               {	[               o,               O ] };\n"
"	key <AD10>               {	[               p,               P ] };\n"
"	key <AD11>               {	[     bracketleft,       braceleft ] };\n"
"	key <AD12>               {	[    bracketright,      braceright ] };\n"
"	key <RTRN>               {	[          Return ] };\n"
"	key <LCTL>               {	[       Control_L ] };\n"
"	key <AC01>               {	[               a,               A ] };\n"
"	key <AC02>               {	[               s,               S ] };\n"
"	key <AC03>               {	[               d,               D ] };\n"
"	key <AC04>               {	[               f,               F ] };\n"
"	key <AC05>               {	[               g,               G ] };\n"
"	key <AC06>               {	[               h,               H ] };\n"
"	key <AC07>               {	[               j,               J ] };\n"
"	key <AC08>               {	[               k,               K ] };\n"
"	key <AC09>               {	[               l,               L ] };\n"
"	key <AC10>               {	[       semicolon,           colon ] };\n"
"	key <AC11>               {	[      apostrophe,        quotedbl ] };\n"
"	key <TLDE>               {	[           grave,      asciitilde ] };\n"
"	key <LFSH>               {	[         Shift_L ] };\n"
"	key <BKSL>               {	[       backslash,             bar ] };\n"
"	key <AB01>               {	[               z,               Z ] };\n"
"	key <AB02>               {	[               x,               X ] };\n"
"	key <AB03>               {	[               c,               C ] };\n"
"	key <AB04>               {	[               v,               V ] };\n"
"	key <AB05>               {	[               b,               B ] };\n"
"	key <AB06>               {	[               n,               N ] };\n"
"	key <AB07>               {	[               m,               M ] };\n"
"	key <AB08>               {	[           comma,            less ] };\n"
"	key <AB09>               {	[          period,         greater ] };\n"
"	key <AB10>               {	[           slash,        question ] };\n"
"	key <RTSH>               {	[         Shift_R ] };\n"
"	key <KPMU>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [     KP_Multiply,     KP_Multiply,     KP_Multiply,     KP_Multiply,   XF86ClearGrab ]\n"
"	};\n"
"	key <LALT>               {	[           Alt_L,          Meta_L ] };\n"
"	key <SPCE>               {	[           space ] };\n"
"	key <CAPS>               {	[       Caps_Lock ] };\n"
"	key <FK01>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [              F1,              F1,              F1,              F1, XF86Switch_VT_1 ]\n"
"	};\n"
"	key <FK02>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [              F2,              F2,              F2,              F2, XF86Switch_VT_2 ]\n"
"	};\n"
"	key <FK03>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [              F3,              F3,              F3,              F3, XF86Switch_VT_3 ]\n"
"	};\n"
"	key <FK04>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [              F4,              F4,              F4,              F4, XF86Switch_VT_4 ]\n"
"	};\n"
"	key <FK05>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [              F5,              F5,              F5,              F5, XF86Switch_VT_5 ]\n"
"	};\n"
"	key <FK06>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [              F6,              F6,              F6,              F6, XF86Switch_VT_6 ]\n"
"	};\n"
"	key <FK07>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [              F7,              F7,              F7,              F7, XF86Switch_VT_7 ]\n"
"	};\n"
"	key <FK08>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [              F8,              F8,              F8,              F8, XF86Switch_VT_8 ]\n"
"	};\n"
"	key <FK09>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [              F9,              F9,              F9,              F9, XF86Switch_VT_9 ]\n"
"	};\n"
"	key <FK10>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [             F10,             F10,             F10,             F10, XF86Switch_VT_10 ]\n"
"	};\n"
"	key <NMLK>               {	[        Num_Lock ] };\n"
"	key <SCLK>               {	[     Scroll_Lock ] };\n"
"	key <KP7>                {	[         KP_Home,            KP_7 ] };\n"
"	key <KP8>                {	[           KP_Up,            KP_8 ] };\n"
"	key <KP9>                {	[        KP_Prior,            KP_9 ] };\n"
"	key <KPSU>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [     KP_Subtract,     KP_Subtract,     KP_Subtract,     KP_Subtract,  XF86Prev_VMode ]\n"
"	};\n"
"	key <KP4>                {	[         KP_Left,            KP_4 ] };\n"
"	key <KP5>                {	[        KP_Begin,            KP_5 ] };\n"
"	key <KP6>                {	[        KP_Right,            KP_6 ] };\n"
"	key <KPAD>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [          KP_Add,          KP_Add,          KP_Add,          KP_Add,  XF86Next_VMode ]\n"
"	};\n"
"	key <KP1>                {	[          KP_End,            KP_1 ] };\n"
"	key <KP2>                {	[         KP_Down,            KP_2 ] };\n"
"	key <KP3>                {	[         KP_Next,            KP_3 ] };\n"
"	key <KP0>                {	[       KP_Insert,            KP_0 ] };\n"
"	key <KPDL>               {	[       KP_Delete,      KP_Decimal ] };\n"
"	key <LVL3>               {	[ ISO_Level3_Shift ] };\n"
"	key <LSGT>               {	[            less,         greater,             bar,       brokenbar ] };\n"
"	key <FK11>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [             F11,             F11,             F11,             F11, XF86Switch_VT_11 ]\n"
"	};\n"
"	key <FK12>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [             F12,             F12,             F12,             F12, XF86Switch_VT_12 ]\n"
"	};\n"
"	key <KATA>               {	[        Katakana ] };\n"
"	key <HIRA>               {	[        Hiragana ] };\n"
"	key <HENK>               {	[     Henkan_Mode ] };\n"
"	key <HKTG>               {	[ Hiragana_Katakana ] };\n"
"	key <MUHE>               {	[        Muhenkan ] };\n"
"	key <KPEN>               {	[        KP_Enter ] };\n"
"	key <RCTL>               {	[       Control_R ] };\n"
"	key <KPDV>               {\n"
"		type= \"CTRL+ALT\",\n"
"		symbols[Group1]= [       KP_Divide,       KP_Divide,       KP_Divide,       KP_Divide,      XF86Ungrab ]\n"
"	};\n"
"	key <PRSC>               {\n"
"		type= \"PC_ALT_LEVEL2\",\n"
"		symbols[Group1]= [           Print,         Sys_Req ]\n"
"	};\n"
"	key <RALT>               {\n"
"		type= \"TWO_LEVEL\",\n"
"		symbols[Group1]= [           Alt_R,          Meta_R ]\n"
"	};\n"
"	key <LNFD>               {	[        Linefeed ] };\n"
"	key <HOME>               {	[            Home ] };\n"
"	key <UP>                 {	[              Up ] };\n"
"	key <PGUP>               {	[           Prior ] };\n"
"	key <LEFT>               {	[            Left ] };\n"
"	key <RGHT>               {	[           Right ] };\n"
"	key <END>                {	[             End ] };\n"
"	key <DOWN>               {	[            Down ] };\n"
"	key <PGDN>               {	[            Next ] };\n"
"	key <INS>                {	[          Insert ] };\n"
"	key <DELE>               {	[          Delete ] };\n"
"	key <MUTE>               {	[   XF86AudioMute ] };\n"
"	key <VOL->               {	[ XF86AudioLowerVolume ] };\n"
"	key <VOL+>               {	[ XF86AudioRaiseVolume ] };\n"
"	key <POWR>               {	[    XF86PowerOff ] };\n"
"	key <KPEQ>               {	[        KP_Equal ] };\n"
"	key <I126>               {	[       plusminus ] };\n"
"	key <PAUS>               {\n"
"		type= \"PC_CONTROL_LEVEL2\",\n"
"		symbols[Group1]= [           Pause,           Break ]\n"
"	};\n"
"	key <I128>               {	[     XF86LaunchA ] };\n"
"	key <I129>               {	[      KP_Decimal,      KP_Decimal ] };\n"
"	key <HNGL>               {	[          Hangul ] };\n"
"	key <HJCV>               {	[    Hangul_Hanja ] };\n"
"	key <LWIN>               {	[         Super_L ] };\n"
"	key <RWIN>               {	[         Super_R ] };\n"
"	key <COMP>               {	[            Menu ] };\n"
"	key <STOP>               {	[          Cancel ] };\n"
"	key <AGAI>               {	[            Redo ] };\n"
"	key <PROP>               {	[        SunProps ] };\n"
"	key <UNDO>               {	[            Undo ] };\n"
"	key <FRNT>               {	[        SunFront ] };\n"
"	key <COPY>               {	[        XF86Copy ] };\n"
"	key <OPEN>               {	[        XF86Open ] };\n"
"	key <PAST>               {	[       XF86Paste ] };\n"
"	key <FIND>               {	[            Find ] };\n"
"	key <CUT>                {	[         XF86Cut ] };\n"
"	key <HELP>               {	[            Help ] };\n"
"	key <I147>               {	[      XF86MenuKB ] };\n"
"	key <I148>               {	[  XF86Calculator ] };\n"
"	key <I150>               {	[       XF86Sleep ] };\n"
"	key <I151>               {	[      XF86WakeUp ] };\n"
"	key <I152>               {	[    XF86Explorer ] };\n"
"	key <I153>               {	[        XF86Send ] };\n"
"	key <I155>               {	[        XF86Xfer ] };\n"
"	key <I156>               {	[     XF86Launch1 ] };\n"
"	key <I157>               {	[     XF86Launch2 ] };\n"
"	key <I158>               {	[         XF86WWW ] };\n"
"	key <I159>               {	[         XF86DOS ] };\n"
"	key <I160>               {	[ XF86ScreenSaver ] };\n"
"	key <I161>               {	[ XF86RotateWindows ] };\n"
"	key <I162>               {	[    XF86TaskPane ] };\n"
"	key <I163>               {	[        XF86Mail ] };\n"
"	key <I164>               {	[   XF86Favorites ] };\n"
"	key <I165>               {	[  XF86MyComputer ] };\n"
"	key <I166>               {	[        XF86Back ] };\n"
"	key <I167>               {	[     XF86Forward ] };\n"
"	key <I169>               {	[       XF86Eject ] };\n"
"	key <I170>               {	[       XF86Eject,       XF86Eject ] };\n"
"	key <I171>               {	[   XF86AudioNext ] };\n"
"	key <I172>               {	[   XF86AudioPlay,  XF86AudioPause ] };\n"
"	key <I173>               {	[   XF86AudioPrev ] };\n"
"	key <I174>               {	[   XF86AudioStop,       XF86Eject ] };\n"
"	key <I175>               {	[ XF86AudioRecord ] };\n"
"	key <I176>               {	[ XF86AudioRewind ] };\n"
"	key <I177>               {	[       XF86Phone ] };\n"
"	key <I179>               {	[       XF86Tools ] };\n"
"	key <I180>               {	[    XF86HomePage ] };\n"
"	key <I181>               {	[      XF86Reload ] };\n"
"	key <I182>               {	[       XF86Close ] };\n"
"	key <I185>               {	[    XF86ScrollUp ] };\n"
"	key <I186>               {	[  XF86ScrollDown ] };\n"
"	key <I187>               {	[       parenleft ] };\n"
"	key <I188>               {	[      parenright ] };\n"
"	key <I189>               {	[         XF86New ] };\n"
"	key <I190>               {	[            Redo ] };\n"
"	key <FK13>               {	[       XF86Tools ] };\n"
"	key <FK14>               {	[     XF86Launch5 ] };\n"
"	key <FK15>               {	[     XF86Launch6 ] };\n"
"	key <FK16>               {	[     XF86Launch7 ] };\n"
"	key <FK17>               {	[     XF86Launch8 ] };\n"
"	key <FK18>               {	[     XF86Launch9 ] };\n"
"	key <FK20>               {	[ XF86AudioMicMute ] };\n"
"	key <FK21>               {	[ XF86TouchpadToggle ] };\n"
"	key <FK22>               {	[  XF86TouchpadOn ] };\n"
"	key <FK23>               {	[ XF86TouchpadOff ] };\n"
"	key <MDSW>               {	[     Mode_switch ] };\n"
"	key <ALT>                {	[        NoSymbol,           Alt_L ] };\n"
"	key <META>               {	[        NoSymbol,          Meta_L ] };\n"
"	key <SUPR>               {	[        NoSymbol,         Super_L ] };\n"
"	key <HYPR>               {	[        NoSymbol,         Hyper_L ] };\n"
"	key <I208>               {	[   XF86AudioPlay ] };\n"
"	key <I209>               {	[  XF86AudioPause ] };\n"
"	key <I210>               {	[     XF86Launch3 ] };\n"
"	key <I211>               {	[     XF86Launch4 ] };\n"
"	key <I212>               {	[     XF86LaunchB ] };\n"
"	key <I213>               {	[     XF86Suspend ] };\n"
"	key <I214>               {	[       XF86Close ] };\n"
"	key <I215>               {	[   XF86AudioPlay ] };\n"
"	key <I216>               {	[ XF86AudioForward ] };\n"
"	key <I218>               {	[           Print ] };\n"
"	key <I220>               {	[      XF86WebCam ] };\n"
"	key <I223>               {	[        XF86Mail ] };\n"
"	key <I224>               {	[   XF86Messenger ] };\n"
"	key <I225>               {	[      XF86Search ] };\n"
"	key <I226>               {	[          XF86Go ] };\n"
"	key <I227>               {	[     XF86Finance ] };\n"
"	key <I228>               {	[        XF86Game ] };\n"
"	key <I229>               {	[        XF86Shop ] };\n"
"	key <I231>               {	[          Cancel ] };\n"
"	key <I232>               {	[ XF86MonBrightnessDown ] };\n"
"	key <I233>               {	[ XF86MonBrightnessUp ] };\n"
"	key <I234>               {	[  XF86AudioMedia ] };\n"
"	key <I235>               {	[     XF86Display ] };\n"
"	key <I236>               {	[ XF86KbdLightOnOff ] };\n"
"	key <I237>               {	[ XF86KbdBrightnessDown ] };\n"
"	key <I238>               {	[ XF86KbdBrightnessUp ] };\n"
"	key <I239>               {	[        XF86Send ] };\n"
"	key <I240>               {	[       XF86Reply ] };\n"
"	key <I241>               {	[ XF86MailForward ] };\n"
"	key <I242>               {	[        XF86Save ] };\n"
"	key <I243>               {	[   XF86Documents ] };\n"
"	key <I244>               {	[     XF86Battery ] };\n"
"	key <I245>               {	[   XF86Bluetooth ] };\n"
"	key <I246>               {	[        XF86WLAN ] };\n"
"	key <I254>               {	[        XF86WWAN ] };\n"
"	key <I255>               {	[      XF86RFKill ] };\n"
"	modifier_map Shift { <LFSH>, <RTSH> };\n"
"	modifier_map Lock { <CAPS> };\n"
"	modifier_map Control { <LCTL>, <RCTL> };\n"
"	modifier_map Mod1 { <LALT>, <RALT>, <META> };\n"
"	modifier_map Mod2 { <NMLK> };\n"
"	modifier_map Mod4 { <LWIN>, <RWIN>, <SUPR>, <HYPR> };\n"
"	modifier_map Mod5 { <LVL3>, <MDSW> };\n"
"};\n"
"\n"
"};\n";
